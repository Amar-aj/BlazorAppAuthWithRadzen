@page "/login"


@using BlazorAppAuthWithRadzen.Client.Models
@using System.Text.Json
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager Navigation
@inject IHttpClientFactory HttpClientFactory
@inject AuthenticationStateProvider AuthStateProvider
<h3>Login</h3>
@* <RadzenTemplateForm TItem="LoginRequest" Data=@model Submit=@OnSubmit InvalidSubmit=@OnInvalidSubmit>
    <RadzenStack Gap="1rem" class="rz-p-sm-12">
        <RadzenFormField Text="First Name" Variant="@variant">
            <ChildContent>
                <RadzenTextBox Name="UserName" @bind-Value=@model.UserName />
            </ChildContent>
            <Helper>
                <RadzenRequiredValidator Component="UserName" Text="UserName is required." />
            </Helper>
        </RadzenFormField>
        <RadzenFormField Text="Last Name" Variant="@variant">
            <ChildContent>
                <RadzenTextBox Name="Password" @bind-Value=@model.Password />
            </ChildContent>
            <Helper>
                <RadzenRequiredValidator Component="Password" Text="Password is required." />
            </Helper>
        </RadzenFormField>
        <RadzenButton ButtonType="ButtonType.Submit" Text="Submit"></RadzenButton>
    </RadzenStack>
</RadzenTemplateForm> *@



<EditForm Model="@model" FormName="login-data" OnValidSubmit="@OnSubmit" style="width: 200px;">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Email:</label>
        <InputText @bind-Value="model.UserName" class="form-control" />
        <ValidationMessage For="@(() => model.UserName)" />
    </div>

    <div class="form-group">
        <label>Password:</label>
        <InputText @bind-Value="model.Password" type="password" class="form-control" />
        <ValidationMessage For="@(() => model.Password)" />
    </div>

    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>


@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    // [SupplyParameterFromForm]
    public LoginRequest model { get; set; } = new LoginRequest() { UserName = "aa", Password = "ss" };

    [SupplyParameterFromQuery]
    public string ReturnUrl { get; set; } = "/";

    private string errorMessage;

    Variant variant = Variant.Outlined;

    async Task OnSubmit()
    {

        if (model.UserName == "aa" && model.Password == "ss")
        {
            var claims = new List<Claim>
                             {
                                 new Claim(ClaimTypes.Name, "Demo"),
                                 new Claim(ClaimTypes.NameIdentifier, "123456789"),
                                 new Claim(ClaimTypes.Email, "ajjj@gmail.com"),
                             };

            var claimsIdentity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);

            // await HttpContext.SignInAsync(
            //      CookieAuthenticationDefaults.AuthenticationScheme,
            //      new ClaimsPrincipal(claimsIdentity));

            var principal = new ClaimsPrincipal(claimsIdentity);

            // Sign in the user
            await HttpContext.SignInAsync(principal);


            Navigation.NavigateTo(ReturnUrl, true);
        }
        else
        {
            errorMessage = "Invalid login attempt.";
        }

        Console.WriteLine(errorMessage);
        Console.WriteLine($"Submit: {JsonSerializer.Serialize(model, new JsonSerializerOptions() { WriteIndented = true })}");
    }

    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
        Console.WriteLine($"InvalidSubmit: {JsonSerializer.Serialize(args, new JsonSerializerOptions() { WriteIndented = true })}");
    }
}
