@using BlazorAppAuthWithRadzen.Client.Components
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation
@inject HttpClient Http

 <RadzenHeader>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
            <RadzenSidebarToggle Click="@(() => sidebarExpanded = !sidebarExpanded)" />
            <RadzenLabel Text="Header" />
               @* render mode don't really need here but main application used it *@
            <UserInfoComponent @rendermode="InteractiveAuto" />
            @* <UserInfo /> *@
        </RadzenStack>
    </RadzenHeader>
    <RadzenSidebar Responsive="false" Style="width: max-content">
        <RadzenPanelMenu DisplayStyle="@(sidebarExpanded ? MenuItemDisplayStyle.IconAndText : MenuItemDisplayStyle.Icon)" ShowArrow="false">
            <RadzenPanelMenuItem Text="Overview" Icon="home" Path=""/>
            <RadzenPanelMenuItem Text="Counter" Icon="auto_awesome" Path="counter" />
            <RadzenPanelMenuItem Text="Counter1" Icon="auto_awesome" Path="counter1" />
            <RadzenPanelMenuItem Text="weather" Icon="auto_awesome" Path="weather" />
            <RadzenPanelMenuItem Text="Protected" Icon="auto_awesome" Path="protected" />
            <RadzenPanelMenuItem Text="Dashboard" Icon="dashboard" />
            <RadzenPanelMenuItem Text="UI Fundamentals" Icon="auto_awesome">
                <RadzenPanelMenuItem Text="Themes" Icon="color_lens" />
                <RadzenPanelMenuItem Text="Colors" Icon="invert_colors" />
            </RadzenPanelMenuItem>
        </RadzenPanelMenu>
    </RadzenSidebar>


@code {
    bool sidebarExpanded = true;

    private bool isAuthenticated;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity.IsAuthenticated;
    }

    private async Task Logout()
    {
        await Http.GetAsync("Account/Logout");
        isAuthenticated = false;
        Navigation.NavigateTo("login");
    }
}